{"ast":null,"code":"import _objectSpread from\"/Users/kanglantang/Desktop/E-Book/New/ebook0925/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var api=\"https://reactnd-books-api.udacity.com\";// Generate a unique token for storing your bookshelf data on the backend server.\nvar token=localStorage.token;if(!token)token=localStorage.token=Math.random().toString(36).substr(-8);var headers={'Accept':'application/json','Authorization':token};export var get=function get(bookId){return fetch(\"\".concat(api,\"/books/\").concat(bookId),{headers:headers}).then(function(res){return res.json();}).then(function(data){return data.book;});};export var getAll=function getAll(){return fetch(\"\".concat(api,\"/books\"),{headers:headers}).then(function(res){return res.json();}).then(function(data){return data.books;});};export var update=function update(book,shelf){return fetch(\"\".concat(api,\"/books/\").concat(book.id),{method:'PUT',headers:_objectSpread(_objectSpread({},headers),{},{'Content-Type':'application/json'}),body:JSON.stringify({shelf:shelf})}).then(function(res){return res.json();});};export var search=function search(query,maxResults){return fetch(\"\".concat(api,\"/search\"),{method:'POST',headers:_objectSpread(_objectSpread({},headers),{},{'Content-Type':'application/json'}),body:JSON.stringify({query:query,maxResults:maxResults})}).then(function(res){return res.json();}).then(function(data){return data.books;});};","map":{"version":3,"sources":["/Users/kanglantang/Desktop/E-Book/New/ebook0925/src/utils/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query","maxResults"],"mappings":"qKACA,GAAMA,CAAAA,GAAG,CAAG,uCAAZ,CAGA;AACA,GAAIC,CAAAA,KAAK,CAAGC,YAAY,CAACD,KAAzB,CACA,GAAI,CAACA,KAAL,CACEA,KAAK,CAAGC,YAAY,CAACD,KAAb,CAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B,CAEF,GAAMC,CAAAA,OAAO,CAAG,CACd,SAAU,kBADI,CAEd,gBAAiBN,KAFH,CAAhB,CAKA,MAAO,IAAMO,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,MAAD,QACjBC,CAAAA,KAAK,WAAIV,GAAJ,mBAAiBS,MAAjB,EAA2B,CAAEF,OAAO,CAAPA,OAAF,CAA3B,CAAL,CACGI,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAG,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAT,EAFZ,CADiB,EAAZ,CAKP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SACpBN,CAAAA,KAAK,WAAIV,GAAJ,WAAiB,CAAEO,OAAO,CAAPA,OAAF,CAAjB,CAAL,CACGI,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAG,IAAI,QAAIA,CAAAA,IAAI,CAACG,KAAT,EAFZ,CADoB,EAAf,CAKP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACH,IAAD,CAAOI,KAAP,QACpBT,CAAAA,KAAK,WAAIV,GAAJ,mBAAiBe,IAAI,CAACK,EAAtB,EAA4B,CAC/BC,MAAM,CAAE,KADuB,CAE/Bd,OAAO,gCACFA,OADE,MAEL,eAAgB,kBAFX,EAFwB,CAM/Be,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEL,KAAK,CAALA,KAAF,CAAf,CANyB,CAA5B,CAAL,CAOGR,IAPH,CAOQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAPX,CADoB,EAAf,CAUP,MAAO,IAAMY,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAQC,UAAR,QACpBjB,CAAAA,KAAK,WAAIV,GAAJ,YAAkB,CACrBqB,MAAM,CAAE,MADa,CAErBd,OAAO,gCACFA,OADE,MAEL,eAAgB,kBAFX,EAFc,CAMrBe,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEE,KAAK,CAALA,KAAF,CAASC,UAAU,CAAVA,UAAT,CAAf,CANe,CAAlB,CAAL,CAOGhB,IAPH,CAOQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAPX,EAQGF,IARH,CAQQ,SAAAG,IAAI,QAAIA,CAAAA,IAAI,CAACG,KAAT,EARZ,CADoB,EAAf","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  }).then(res => res.json())\n    .then(data => data.books)"]},"metadata":{},"sourceType":"module"}